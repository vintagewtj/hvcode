import torch
from torch import nn
import config
import os
device = torch.device("cuda:0")

class CT_Deconv1(nn.Module):
    def __init__(self, in_chs, out_chs):
        super(CT_Deconv1, self).__init__()
        self.ct_deconv1 = nn.ConvTranspose2d(in_chs, out_chs, kernel_size=3, stride=2, padding=1, output_padding=1)
    def forward(self, x):
        x = self.ct_deconv1(x)
        return x

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.deconv = CT_Deconv1(128, 64)

    def forward(self,x):
        x = self.deconv(x)
        return x

if __name__ == '__main__':
    model = Net()
    model.to(device)
    with torch.no_grad():
        input = torch.ones(1, 128, 256, 256)
        input = input.to(device)
        output = model(input)
        output = output.to(device)
    print(output.shape)
    # print(output)
