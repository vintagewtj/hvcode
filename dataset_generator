import os
import numpy as np
import pydicom
import torch
from torchvision import transforms
from torch.utils.data import Dataset
import pylab
import cv2
from main_parser import *
import astra
import random

class Datasets(Dataset):
    def __init__(self, path):
        super(Datasets, self).__init__()
        self.root = path
        self.target_path = self.root
        self.target_list = os.listdir(self.target_path)
        self.target_list.sort()
        self.dataset = None

    # def augmentation(selfself, image, flipCode):
    #     flip = cv2.flip(image, flipCode)
    #     return flip
    def augment(selfself, image, ):
        # flip = cv2.flip(image, flipCode)
        bright = np.power(image, np.random.randint(5, 16)/10)
        # 随机进行数据增强，为2时不做处理
        # flipCode = random.choice([-1, 0, 1, 2])
        # if flipCode != 2:
        #     flip = cv2.flip(bright, flipCode)
        # else:
        #     flip = bright
        return bright

    def __getitem__(self, idx):
        if self.dataset is None:
            file_path = os.path.join(self.target_path, self.target_list[idx])
            ds = pydicom.dcmread(file_path)
            pixel_value = ds.pixel_array
            slope = int(ds.RescaleSlope)
            intercept = int(ds.RescaleIntercept)
            Hu = pixel_value * slope + intercept
            window_width = 440
            window_level = 55
            window_low = window_level - window_width * 0.5
            Hu = (Hu - window_low) / window_width
            Hu[Hu > 1] = 1
            Hu[Hu < 0] = 0
            # Hu = 0 + (1 - 0) / (np.max(pixel_value) - np.min(pixel_value)) * (pixel_value - np.min(pixel_value))
            targets = self.augment(Hu)
            # targets = Hu

            vol_geom = astra.create_vol_geom(512, 512)
            proj_geom = astra.create_proj_geom('parallel', 1.0, 736,
                                               np.linspace(np.pi * -90 / 180, np.pi * 90 / 180, 120, False),)
            P = np.array(targets)
            proj_id = astra.create_projector('cuda', proj_geom, vol_geom)  # CPU类型的的投影生成模式可以是
            # line, linear, strip, GPU的话使用cuda即可。
            sinogram_id, sinogram = astra.create_sino(P, proj_id)
            rec_id = astra.data2d.create('-vol', vol_geom)
            cfg = astra.astra_dict('FBP_CUDA')  # 进行网络训练的同时使用GPU重建占用大量资源，所以不使用FBP_CUDA
            cfg['ReconstructionDataId'] = rec_id
            cfg['ProjectionDataId'] = sinogram_id
            cfg['option'] = {'FilterType': 'Ram-lak'}  # 如果使用SIRT等迭代算法，此行舍去
            cfg['ProjectorId'] = proj_id
            alg_id = astra.algorithm.create(cfg)
            astra.algorithm.run(alg_id)
            # astra.algorithm.run(alg_id, 20)          # 如果使用SIRT等迭代算法，此行指定迭代次数
            inputs = astra.data2d.get(rec_id).clip(0, 1)
            # min_pix = float(ds.SmallestImagePixelValue)
            # max_pix = float(ds.LargestImagePixelValue)
            # inputs = min_pix + (max_pix - min_pix) / (np.max(inputs) - np.min(inputs)) * (inputs - np.min(inputs))
            # inputs = 0 + (1 - 0) / (np.max(inputs) - np.min(inputs)) * (inputs - np.min(inputs))

            astra.algorithm.delete(alg_id)
            astra.data2d.delete(rec_id)
            astra.data2d.delete(sinogram_id)
            astra.projector.delete(proj_id)

            vol_geom = astra.create_vol_geom(512, 512)
            proj_geom = astra.create_proj_geom('parallel', 1.0, 736,
                                               np.linspace(np.pi * -90 / 180, np.pi * 90 / 180, 2000, False), )
            P = np.array(targets)
            proj_id = astra.create_projector('cuda', proj_geom, vol_geom)  # CPU类型的的投影生成模式可以是
            # line, linear, strip, GPU的话使用cuda即可。
            sinogram_id, sinogram = astra.create_sino(P, proj_id)
            rec_id = astra.data2d.create('-vol', vol_geom)
            cfg = astra.astra_dict('FBP_CUDA')  # 进行网络训练的同时使用GPU重建占用大量资源，所以不使用FBP_CUDA
            cfg['ReconstructionDataId'] = rec_id
            cfg['ProjectionDataId'] = sinogram_id
            cfg['option'] = {'FilterType': 'Ram-lak'}  # 如果使用SIRT等迭代算法，此行舍去
            cfg['ProjectorId'] = proj_id
            alg_id = astra.algorithm.create(cfg)
            astra.algorithm.run(alg_id)
            # astra.algorithm.run(alg_id, 20)          # 如果使用SIRT等迭代算法，此行指定迭代次数
            outputs = astra.data2d.get(rec_id).clip(0, 1)
            # outputs = 0 + (1 - 0) / (np.max(outputs) - np.min(outputs)) * (outputs - np.min(outputs))

            astra.algorithm.delete(alg_id)
            astra.data2d.delete(rec_id)
            astra.data2d.delete(sinogram_id)
            astra.projector.delete(proj_id)

            # 随机进行数据增强，为2时不做处理
            # flipCode = random.choice([-1, 0, 1, 2])
            # if flipCode != 2:
            #     imgs = self.augment(imgs, flipCode)
            #     targets = self.augment(targets, flipCode)
            # else:
            #     imgs = imgs
            #     targets = targets

            transform = transforms.ToTensor()
            inputs = transform(inputs)
            inputs = inputs.view(1, 512, 512)
            outputs = transform(outputs)
            outputs = outputs.view(1, 512, 512)

        return inputs, outputs

    def __len__(self):
        return len(self.target_list)

if __name__ == '__main__':
    train_data = Datasets('/data1/datasets/120_angles_in360_origin/test_data')

    i = 331
    a, b = train_data[i]
    a = a.view(512, 512)
    b = b.view(512, 512)
    pylab.gray()
    pylab.figure(1)
    pylab.imshow(a)
    pylab.colorbar()
    pylab.figure(2)
    pylab.imshow(b)
    pylab.colorbar()
    pylab.show()
    # pylab.imsave('/data1/results/gt.bmp', b)
