import os

import cv2
import numpy as np
# from skimage import metrics
from scipy import signal
from dataset_generator import *
from model import *
from evaluation import *
from evaluation import _ssim_one_channel
from main_parser import *
device = torch.device("cuda:0")

test_data = Datasets('/data1/datasets/{0}_angles_in360_origin/test_data'.format(args.angles))
version = args.version

model_list = os.listdir("/data1/projects/new_experiments/{0}/checkpoints".format(version))
model_list.sort(key=lambda x:int(x[6:-4]))
for model_name in model_list:        # 指定使用训练第几个epoch后所保存的模型进行测试
    model = torch.load("/data1/projects/new_experiments/{0}/checkpoints/{1}".format(version, model_name))  # /run_records/2022.3.28_2Unet_b_s16_epoch20_60angles
    model.to(device)
    # epoch = 19
    mse_sum = 0
    psnr_sum = 0
    ssim_sum = 0
    # mse_list = []
    # psnr_list = []
    # ssim_list = []
    test_list = np.random
    test_num = 10

    for i in range(test_num):                   # 指定使用训练集中第几个数据进行测试

        gt_img = test_data[i][1][0]
        gt_img = np.array(gt_img)
        gt_img = np.reshape(gt_img, (512, 512))
        input_img = test_data[i][0][0]
        input_img_tensor = input_img
        # input_img = np.array(input_img)
        # input_img = np.reshape(input_img, (362, 362))
        input_img_tensor = input_img_tensor.view(1, 1, 512, 512)

        with torch.no_grad():
            input_img_tensor = input_img_tensor.to(device)
            output = model(input_img_tensor)

        output = output.cpu()
        out_img = np.array(output)
        out_img = np.reshape(out_img, (512, 512))

        # slope1 = (255-(0))/(np.max(P)-np.min(P))
        # P = (0) + slope1 * (P-np.min(P))
        # slope2 = (255 - (0)) / (np.max(out_img) - np.min(out_img))
        # out_img = (0) + slope2 * (out_img - np.min(out_img))

        ran = np.max(gt_img) - np.min(gt_img)
        mse = compute_mse(out_img, gt_img)
        psnr = compute_psnr(out_img, gt_img, ran)
        ssim = _ssim_one_channel(out_img, gt_img, 11, ran)
        # mse = compute_mse(input_img, gt_img)
        # psnr = compute_psnr(input_img, gt_img, ran)
        # ssim = _ssim_one_channel(input_img, gt_img, 11, ran)
        mse_sum += mse
        psnr_sum += psnr
        ssim_sum += ssim
        # mse_list.append(mse)
        # psnr_list.append(psnr)
        # ssim_list.append(ssim)
        # astra.algorithm.delete(alg_id)
        # astra.data2d.delete(rec_id)
        # astra.data2d.delete(sinogram_id)
        # astra.projector.delete(proj_id)

    mse_mean = mse_sum / test_num
    # mse_var = np.var(mse_list)
    psnr_mean = psnr_sum / test_num
    # psnr_var = np.var(psnr_list)
    ssim_mean = ssim_sum / test_num
    # ssim_var = np.var(ssim_list)
    print("{0}_mse:{1} ".format(model_name, mse_mean, ))
    print("{0}_psnr:{1}".format(model_name, psnr_mean, ))
    print("{0}_ssim:{1} \n".format(model_name, ssim_mean, ))

    # pylab.gray()
    # pylab.figure(1)
    # pylab.imshow(P)
    # pylab.colorbar()
    # pylab.figure(2)
    # pylab.imshow(out_img)
    # pylab.colorbar()
    # pylab.show()
