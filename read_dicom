import os
import pydicom
import odl
import numpy as np
import pylab
from torch.autograd._functions import tensor
import astra
from main_parser import *
from dataset_generator import *

# 调用本地的 dicom file
# folder_path = r"../../datasets/DICOM-CT-PD_FD"
# file_name = "L067_4L_100kv_fulldose1.00001.dcm"
# folder_path = "../../datasets/training_image/1mm B30/full_1mm/L067/full_1mm"
# file_name = "L067_FD_1_1.CT.0001.0538.2015.12.22.18.09.40.840353.358089490.IMA"
# file_path = os.path.join(folder_path,file_name)
# ds = pydicom.dcmread(file_path)
test_data = Datasets('/data1/datasets/{0}_angles_in360_even/test_data'.format(args.angles))
i = 2
target = test_data[i][1]
target = target.numpy()
target = np.reshape(target, (512, 512))
# target = ds.pixel_array
# target = 0 + (255 - 0)/(np.max(target) - np.min(target)) * (target - np.min(target))

pylab.gray()
pylab.figure(1)
pylab.imshow(target, )
pylab.colorbar()

# detectors = 725
# size = 512
# max_ang = 2 * np.pi
# angles = 180
# space = odl.uniform_discr([-size//2, -size//2], [size//2, size//2], [size, size], dtype='float32')
# angle_partition = odl.uniform_partition(0,max_ang, angles)
# detector_partition = odl.uniform_partition(-detectors//2, detectors//2, detectors)
# geometry = odl.tomo.Parallel2dGeometry(angle_partition,detector_partition)
# ### geometry = odl.tomo.parallel_beam_geometry(space, num_angles=angles, det_shape=(detectors,))
# fwd_op = odl.tomo.RayTransform(space, geometry, impl='astra_cuda')
# fbp_op = odl.tomo.fbp_op(fwd_op)#,filter_type='Hann')
# #
# sinogram = fwd_op(target)
# pylab.figure(2)
# pylab.imshow(sinogram)
# pylab.colorbar()
#
# fbp_result = fbp_op(sinogram)
# pylab.figure(3)
# pylab.imshow(fbp_result)
# pylab.colorbar()
### from matplotlib import pyplot
### pyplot.imshow(ds.pixel_array,cmap=pyplot.cm.bone)
### pyplot.show()

vol_geom = astra.create_vol_geom(512, 512)
proj_geom = astra.create_proj_geom('parallel', 1.0, 725,
                                   np.linspace(-np.pi * 180 / 180, np.pi * 180 / 180, 89, False),)
P = np.array(target)
proj_id = astra.create_projector('cuda', proj_geom, vol_geom)  # CPU类型的的投影生成模式可以是
                                                             # line, linear, strip, GPU的话使用cuda即可。
sinogram_id, sinogram = astra.create_sino(P, proj_id)
rec_id = astra.data2d.create('-vol', vol_geom)
cfg = astra.astra_dict('SIRT_CUDA')  # 进行网络训练的同时使用GPU重建占用大量资源，所以不使用FBP_CUDA
cfg['ReconstructionDataId'] = rec_id
cfg['ProjectionDataId'] = sinogram_id
# cfg['option'] = {'FilterType': 'Hann'}  # 如果使用SIRT等迭代算法，此行舍去
cfg['ProjectorId'] = proj_id
alg_id = astra.algorithm.create(cfg)
# astra.algorithm.run(alg_id)
astra.algorithm.run(alg_id, 1000)          # 如果使用SIRT等迭代算法，此行指定迭代次数
result = astra.data2d.get(rec_id)
# result = 0 + (1 - 0) / (np.max(result) - np.min(result)) * (result - np.min(result))

astra.algorithm.delete(alg_id)
astra.data2d.delete(rec_id)
astra.data2d.delete(sinogram_id)
astra.projector.delete(proj_id)

pylab.gray()
# pylab.figure(1)
# pylab.imshow(ground_truth)
# pylab.colorbar()
pylab.figure(2)
pylab.imshow(sinogram)
pylab.colorbar()
pylab.figure(3)
pylab.imshow(result, vmin=0, vmax=1)
pylab.colorbar()
pylab.show()
